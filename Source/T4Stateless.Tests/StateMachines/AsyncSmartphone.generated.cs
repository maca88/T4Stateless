//----------------------
// <auto-generated>
//	Generated by T4StateMachine.
// </auto-generated>
//----------------------
// ReSharper disable All
using System;
using System.Collections.Generic;
using Stateless;

namespace T4Stateless.Tests.Async
{
    using Models;
    using System.Threading.Tasks;

    public enum SmartphoneEvent
    {
        Boot,
        Call,
        TurnOff,
        Cancel,
        Connect,
        HungUp,
        PlaceOnHold,
        Resume,
    }

    public abstract class SmartphoneFireAsyncEvent
    {
        protected SmartphoneFireAsyncEvent(Smartphone item, SmartphoneEvent evt, bool isReentry)
        {
            Smartphone = item;
            Event = evt;
            IsReentry = isReentry;
        }

        public Smartphone Smartphone { get; }

        public SmartphoneEvent Event { get; }

        public bool IsReentry { get; }
    }

    public abstract class SmartphoneTransitionAsyncEvent : SmartphoneFireAsyncEvent
    {
        protected SmartphoneTransitionAsyncEvent(SmartphoneState oldState, SmartphoneState newState, Smartphone item, SmartphoneEvent evt) : base(item, evt, false)
        {
            OldState = oldState;
            NewState = newState;
        }

        public SmartphoneState OldState { get; }

        public SmartphoneState NewState { get; }
    }

    public abstract class SmartphoneReentryAsyncEvent : SmartphoneFireAsyncEvent
    {
        protected SmartphoneReentryAsyncEvent(SmartphoneState state, Smartphone item, SmartphoneEvent evt) : base(item, evt, true)
        {
            State = state;
        }

        public SmartphoneState State { get; }
    }

    public class SmartphoneFireBootReentryAsyncEvent : SmartphoneReentryAsyncEvent
    {
        public SmartphoneFireBootReentryAsyncEvent(SmartphoneState state, Smartphone item) : base(state, item, SmartphoneEvent.Boot)
        {
        }
    }

    public class SmartphoneFireBootAsyncEvent : SmartphoneTransitionAsyncEvent
    {
        public SmartphoneFireBootAsyncEvent(SmartphoneState oldState, SmartphoneState newState, Smartphone item) : base(oldState, newState, item, SmartphoneEvent.Boot)
        {
        }
    }

    public class SmartphoneFireCallAsyncEvent : SmartphoneTransitionAsyncEvent
    {
        public SmartphoneFireCallAsyncEvent(SmartphoneState oldState, SmartphoneState newState, Smartphone item, string parameter) : base(oldState, newState, item, SmartphoneEvent.Call)
        {
            Parameter = parameter;
        }

        public string Parameter { get; }
    }

    public class SmartphoneFireCallReentryAsyncEvent : SmartphoneReentryAsyncEvent
    {
        public SmartphoneFireCallReentryAsyncEvent(SmartphoneState state, Smartphone item, string parameter) : base(state, item, SmartphoneEvent.Call)
        {
            Parameter = parameter;
        }

        public string Parameter { get; }
    }

    public class SmartphoneFireTurnOffAsyncEvent : SmartphoneTransitionAsyncEvent
    {
        public SmartphoneFireTurnOffAsyncEvent(SmartphoneState oldState, SmartphoneState newState, Smartphone item) : base(oldState, newState, item, SmartphoneEvent.TurnOff)
        {
        }
    }

    public class SmartphoneFireCancelAsyncEvent : SmartphoneTransitionAsyncEvent
    {
        public SmartphoneFireCancelAsyncEvent(SmartphoneState oldState, SmartphoneState newState, Smartphone item) : base(oldState, newState, item, SmartphoneEvent.Cancel)
        {
        }
    }

    public class SmartphoneFireConnectAsyncEvent : SmartphoneTransitionAsyncEvent
    {
        public SmartphoneFireConnectAsyncEvent(SmartphoneState oldState, SmartphoneState newState, Smartphone item) : base(oldState, newState, item, SmartphoneEvent.Connect)
        {
        }
    }

    public class SmartphoneFireHungUpAsyncEvent : SmartphoneTransitionAsyncEvent
    {
        public SmartphoneFireHungUpAsyncEvent(SmartphoneState oldState, SmartphoneState newState, Smartphone item) : base(oldState, newState, item, SmartphoneEvent.HungUp)
        {
        }
    }

    public class SmartphoneFirePlaceOnHoldAsyncEvent : SmartphoneTransitionAsyncEvent
    {
        public SmartphoneFirePlaceOnHoldAsyncEvent(SmartphoneState oldState, SmartphoneState newState, Smartphone item) : base(oldState, newState, item, SmartphoneEvent.PlaceOnHold)
        {
        }
    }

    public class SmartphoneFireResumeAsyncEvent : SmartphoneTransitionAsyncEvent
    {
        public SmartphoneFireResumeAsyncEvent(SmartphoneState oldState, SmartphoneState newState, Smartphone item) : base(oldState, newState, item, SmartphoneEvent.Resume)
        {
        }
    }

    public class SmartphoneFireResumeReentryAsyncEvent : SmartphoneReentryAsyncEvent
    {
        public SmartphoneFireResumeReentryAsyncEvent(SmartphoneState state, Smartphone item) : base(state, item, SmartphoneEvent.Resume)
        {
        }
    }


    public interface ISmartphoneStateMachineProvider
    {
        SmartphoneStateMachine Create(Smartphone item);
    }

    public partial class SmartphoneStateMachine
    {
        private readonly StateMachine<SmartphoneState, SmartphoneEvent> _sm;
        private readonly Smartphone _item;
        private readonly Func<SmartphoneFireAsyncEvent, Task> _handleEventAction;
        private Dictionary<SmartphoneEvent, Dictionary<Type, StateMachine<SmartphoneState, SmartphoneEvent>.TriggerWithParameters>> _parameters =
            new Dictionary<SmartphoneEvent, Dictionary<Type, StateMachine<SmartphoneState, SmartphoneEvent>.TriggerWithParameters>>();
        private TestService _service;

        public SmartphoneStateMachine(Smartphone item, Func<Smartphone, SmartphoneState> stateAccessor, Action<Smartphone, SmartphoneState> stateMutator, Func<SmartphoneFireAsyncEvent, Task> handleEventAction, TestService service)
        {
            if (item == null)
            {
                throw new ArgumentNullException(nameof(item));
            }
            if (stateAccessor == null)
            {
                throw new ArgumentNullException(nameof(stateAccessor));
            }
            if (stateMutator == null)
            {
                throw new ArgumentNullException(nameof(stateMutator));
            }
            if (handleEventAction == null)
            {
                throw new ArgumentNullException(nameof(handleEventAction));
            }
            _item = item;
            _handleEventAction = handleEventAction;
            _sm = new StateMachine<SmartphoneState, SmartphoneEvent>(() => stateAccessor(_item), (val) => stateMutator(_item, val));
            _service = service;
            AddParameter(SmartphoneEvent.Call, typeof(string), _sm.SetTriggerParameters<string>(SmartphoneEvent.Call));

            Func<bool> predicateOffBoot1 = () => _item.BatteryLevel < 5;
            _sm.Configure(SmartphoneState.Off)
                .PermitReentryIf(SmartphoneEvent.Boot, predicateOffBoot1, "BatteryLevel < 5")
                .PermitIf(SmartphoneEvent.Boot, SmartphoneState.Idle, () => !predicateOffBoot1(), "Otherwise")
                .OnEntryFromAsync(SmartphoneEvent.Boot, t => HandleEvent(t))
                .OnEntryFromAsync(GetParameter<string>(SmartphoneEvent.Call), (p, t) => HandleEvent(t, p))
                .OnEntryFromAsync(SmartphoneEvent.TurnOff, t => HandleEvent(t))
                .OnEntryFromAsync(SmartphoneEvent.Resume, t => HandleEvent(t))
            ;

            Func<bool> predicateIdleCall1 = () => _item.SimInserted;
            Func<bool> predicateIdleCall2 = () => _item.BatteryLevel < 5;
            _sm.Configure(SmartphoneState.Idle)
                .PermitIf(SmartphoneEvent.Call, SmartphoneState.Calling, predicateIdleCall1, "SimInserted")
                .PermitIf(SmartphoneEvent.Call, SmartphoneState.Off, predicateIdleCall2, "BatteryLevel < 5")
                .PermitReentryIf(SmartphoneEvent.Call, () => !predicateIdleCall1() && !predicateIdleCall2(), "Otherwise")
                .Permit(SmartphoneEvent.TurnOff, SmartphoneState.Off)
                .OnEntryFromAsync(SmartphoneEvent.Boot, t => HandleEvent(t))
                .OnEntryFromAsync(GetParameter<string>(SmartphoneEvent.Call), (p, t) => HandleEvent(t, p))
                .OnEntryFromAsync(SmartphoneEvent.Cancel, t => HandleEvent(t))
                .OnEntryFromAsync(SmartphoneEvent.HungUp, t => HandleEvent(t))
            ;

            _sm.Configure(SmartphoneState.Calling)
                .Permit(SmartphoneEvent.Cancel, SmartphoneState.Idle)
                .Permit(SmartphoneEvent.Connect, SmartphoneState.CallConnected)
                .OnEntryFromAsync(GetParameter<string>(SmartphoneEvent.Call), (p, t) => HandleEvent(t, p))
            ;

            _sm.Configure(SmartphoneState.CallConnected)
                .Permit(SmartphoneEvent.HungUp, SmartphoneState.Idle)
                .Permit(SmartphoneEvent.PlaceOnHold, SmartphoneState.CallOnHold)
                .OnEntryFromAsync(SmartphoneEvent.Connect, t => HandleEvent(t))
                .OnEntryFromAsync(SmartphoneEvent.Resume, t => HandleEvent(t))
            ;

            Func<bool> predicateCallOnHoldResume1 = () => _item.BatteryLevel < 5;
            Func<bool> predicateCallOnHoldResume2 = () => _item.Locked;
            _sm.Configure(SmartphoneState.CallOnHold)
                .PermitIf(SmartphoneEvent.Resume, SmartphoneState.Off, predicateCallOnHoldResume1, "BatteryLevel < 5")
                .PermitReentryIf(SmartphoneEvent.Resume, predicateCallOnHoldResume2, "Locked")
                .PermitIf(SmartphoneEvent.Resume, SmartphoneState.CallConnected, () => !predicateCallOnHoldResume1() && !predicateCallOnHoldResume2(), "Otherwise")
                .OnEntryFromAsync(SmartphoneEvent.PlaceOnHold, t => HandleEvent(t))
                .OnEntryFromAsync(SmartphoneEvent.Resume, t => HandleEvent(t))
            ;

        }

        private async Task HandleEvent(StateMachine<SmartphoneState, SmartphoneEvent>.Transition transition)
        {
            if (transition.IsReentry)
            {
                switch (transition.Trigger)
                {
                    case SmartphoneEvent.Boot:
                        await _handleEventAction(new SmartphoneFireBootReentryAsyncEvent(transition.Source, _item));
                        break;
                    case SmartphoneEvent.Resume:
                        await _handleEventAction(new SmartphoneFireResumeReentryAsyncEvent(transition.Source, _item));
                        break;
                }
            }
            else
            {
                switch (transition.Trigger)
                {
                    case SmartphoneEvent.Boot:
                        await _handleEventAction(new SmartphoneFireBootAsyncEvent(transition.Source, transition.Destination, _item));
                        break;
                    case SmartphoneEvent.TurnOff:
                        await _handleEventAction(new SmartphoneFireTurnOffAsyncEvent(transition.Source, transition.Destination, _item));
                        break;
                    case SmartphoneEvent.Cancel:
                        await _handleEventAction(new SmartphoneFireCancelAsyncEvent(transition.Source, transition.Destination, _item));
                        break;
                    case SmartphoneEvent.Connect:
                        await _handleEventAction(new SmartphoneFireConnectAsyncEvent(transition.Source, transition.Destination, _item));
                        break;
                    case SmartphoneEvent.HungUp:
                        await _handleEventAction(new SmartphoneFireHungUpAsyncEvent(transition.Source, transition.Destination, _item));
                        break;
                    case SmartphoneEvent.PlaceOnHold:
                        await _handleEventAction(new SmartphoneFirePlaceOnHoldAsyncEvent(transition.Source, transition.Destination, _item));
                        break;
                    case SmartphoneEvent.Resume:
                        await _handleEventAction(new SmartphoneFireResumeAsyncEvent(transition.Source, transition.Destination, _item));
                        break;
                }
            }
        }

        private async Task HandleEvent(StateMachine<SmartphoneState, SmartphoneEvent>.Transition transition, string param)
        {
            if (transition.IsReentry)
            {
                switch (transition.Trigger)
                {
                    case SmartphoneEvent.Call:
                        await _handleEventAction(new SmartphoneFireCallReentryAsyncEvent(transition.Source, _item, param));
                        break;
                }
            }
            else
            {
                switch (transition.Trigger)
                {
                    case SmartphoneEvent.Call:
                        await _handleEventAction(new SmartphoneFireCallAsyncEvent(transition.Source, transition.Destination, _item, param));
                        break;
                }
            }
        }

        public async Task FireBootAsync()
        {
            await FireAsync(SmartphoneEvent.Boot);
        }

        public async Task FireCallAsync(string parameter)
        {
            await FireAsync(SmartphoneEvent.Call, parameter);
        }

        public async Task FireTurnOffAsync()
        {
            await FireAsync(SmartphoneEvent.TurnOff);
        }

        public async Task FireCancelAsync()
        {
            await FireAsync(SmartphoneEvent.Cancel);
        }

        public async Task FireConnectAsync()
        {
            await FireAsync(SmartphoneEvent.Connect);
        }

        public async Task FireHungUpAsync()
        {
            await FireAsync(SmartphoneEvent.HungUp);
        }

        public async Task FirePlaceOnHoldAsync()
        {
            await FireAsync(SmartphoneEvent.PlaceOnHold);
        }

        public async Task FireResumeAsync()
        {
            await FireAsync(SmartphoneEvent.Resume);
        }

        public bool CanFire(SmartphoneEvent evt)
        {
            return _sm.CanFire(evt);
        }

        public async Task FireAsync<T>(SmartphoneEvent evt, T parameter)
        {
            if (!CanFire(evt))
            {
                throw new InvalidOperationException($"Cannot fire event {evt} in the current state {_sm.State}");
            }
            var param = GetParameter<T>(evt);
            await _sm.FireAsync(param, parameter);
        }

        public async Task FireAsync(SmartphoneEvent evt)
        {
            if (!CanFire(evt))
            {
                throw new InvalidOperationException($"Cannot fire event {evt} in the current state {_sm.State}");
            }
            await _sm.FireAsync(evt);
        }

        public string ToDotGraph()
        {
            return _sm.ToDotGraph();
        }

        private void AddParameter(SmartphoneEvent evt, Type paramType, StateMachine<SmartphoneState, SmartphoneEvent>.TriggerWithParameters trigger)
        {
            Dictionary<Type, StateMachine<SmartphoneState, SmartphoneEvent>.TriggerWithParameters> dict;
            if (!_parameters.TryGetValue(evt, out dict))
            {
                dict = new Dictionary<Type, StateMachine<SmartphoneState, SmartphoneEvent>.TriggerWithParameters>();
                _parameters.Add(evt, dict);
            }
            dict[paramType] = trigger;
        }

        private StateMachine<SmartphoneState, SmartphoneEvent>.TriggerWithParameters<T> GetParameter<T>(SmartphoneEvent evt)
        {
            Dictionary<Type, StateMachine<SmartphoneState, SmartphoneEvent>.TriggerWithParameters> dict;
            if (!_parameters.TryGetValue(evt, out dict))
            {
                throw new KeyNotFoundException($"Key {evt} was not found in trigger parameters dictionary");
            }
            return (StateMachine<SmartphoneState, SmartphoneEvent>.TriggerWithParameters<T>)dict[typeof(T)];
        }
    }
}
